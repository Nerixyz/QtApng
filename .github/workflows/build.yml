name: Build

on:
  push:
    branches: [master, main]
  pull_request:
    branches: [master, main]

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        # prettier-ignore
        include:
          - {host: mac,     target: desktop, qt-version: "5.15.2", arch: clang_64}
          - {host: mac,     target: desktop, qt-version: "6.5.3",  arch: clang_64}
          - {host: mac,     target: desktop, qt-version: "6.7.0",  arch: clang_64}
          - {host: windows, target: desktop, qt-version: "5.15.2", arch: win64_msvc2019_64}
          - {host: windows, target: desktop, qt-version: "5.15.2", arch: win32_msvc2019}
          - {host: windows, target: desktop, qt-version: "6.5.3",  arch: win64_msvc2019_64}
          - {host: windows, target: desktop, qt-version: "6.7.0",  arch: win64_msvc2019_64}
          - {host: linux,   target: desktop, qt-version: "5.15.2", arch: gcc_64}
          - {host: linux,   target: desktop, qt-version: "6.5.3",  arch: gcc_64}
          - {host: linux,   target: desktop, qt-version: "6.7.0",  arch: linux_gcc_64}

    runs-on: ${{ format('{0}-latest', (matrix.host == 'mac' && 'macos') || (matrix.host == 'linux' && 'ubuntu') || matrix.host) }}
    env:
      APNG_FLAGS: ${{ format('-DAPNG_TESTS=On -DAPNG_EXAMPLES=On -DAPNG_QT6={0} -DCMAKE_BUILD_TYPE=Release', startsWith(matrix.qt-version, '6') && 'On' || 'Off') }}
    steps:
      - uses: actions/checkout@v4
        with:
          submodules: recursive
      - name: Install Qt
        uses: jurplel/install-qt-action@v3
        with:
          version: ${{matrix.qt-version}}
          host: ${{matrix.host}}
          target: ${{matrix.target}}
          arch: ${{matrix.arch}}

      - name: Enable Developer Command Prompt (Windows)
        if: matrix.host == 'windows'
        uses: ilammy/msvc-dev-cmd@v1.13.0
        with:
          arch: ${{ startsWith(matrix.arch, 'win32') && 'x86' || 'x64' }}

      - name: Configure (Windows)
        if: matrix.host == 'windows'
        run: |
          cmake -B build -A ${{ startsWith(matrix.arch, 'win32') && 'Win32' || 'x64' }} ${{ env.APNG_FLAGS }}

      - name: Configure (macOS)
        if: matrix.host == 'mac'
        run: |
          cmake -B build-arm64 -DCMAKE_OSX_ARCHITECTURES=arm64 ${{ env.APNG_FLAGS }}
          cmake -B build-x86_64 -DCMAKE_OSX_ARCHITECTURES=x86_64 ${{ env.APNG_FLAGS }}

      - name: Configure (Linux)
        if: matrix.host == 'linux'
        run: |
          cmake -B build ${{ env.APNG_FLAGS }}

      - name: Build (Windows/Linux)
        if: matrix.host != 'mac'
        run: cmake --build build

      - name: Build (macOS)
        if: matrix.host == 'mac'
        run: |
          cmake --build build-arm64
          cmake --build build-x86_64

          mkdir build && cd build

          lipo -create ../build-arm64/qapng.dylib ../build-x86_64/qapng.dylib -output ./qapng.dylib
          lipo -info ./qapng.dylib
